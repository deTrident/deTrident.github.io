<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Better man]]></title>
  <subtitle><![CDATA[Technology Changes the World]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://deTrident.github.io//"/>
  <updated>2015-09-05T13:34:42.101Z</updated>
  <id>http://deTrident.github.io//</id>
  
  <author>
    <name><![CDATA[deTrident]]></name>
    <email><![CDATA[zhengradi@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[WorldWind开发中WorldWindowGLCanvas .setPreferredSize()函数找不到]]></title>
    <link href="http://deTrident.github.io/2015/08/05/worldwind-JO-cannot-find-the-funtion-setPreferredSize/"/>
    <id>http://deTrident.github.io/2015/08/05/worldwind-JO-cannot-find-the-funtion-setPreferredSize/</id>
    <published>2015-08-05T11:24:50.000Z</published>
    <updated>2015-09-05T13:34:42.101Z</updated>
    <content type="html"><![CDATA[<p>值高温假期，无意翻到了csdn中三维GIS开发的专栏，讲的是worldwind Java三维GIS系统开发的东西，十分感兴趣。恰巧要求的环境已经存在，直接耍起来。将最新的Worldwind和JOGL下载回来，解压加载，然后测试Java和JOGL，一切都很顺利。然而，<a id="more"></a>将第一个demo敲入package的时候，却发现WorldWindowGLCanvas中没有setPreferredSize()函数的实现。第一想法，demo太老了，可能是worldwind最新版把这个函数遗弃了，换了新的函数。但是，搜了一下最新的worldwind样例，发现仍有该函数的使用。Google一下，关于该<a href="http://forum.worldwindcentral.com/showthread.php?44844-wwd-setpreferredsize-is-not-recognized" target="_blank" rel="external">函数无法找到的问题</a>不只我一个，<a href="http://forum.worldwindcentral.com/showthread.php?21172-ApplicationTemplate-example" target="_blank" rel="external">worldwind社区</a>和<a href="http://stackoverflow.com/questions/11939028/setpreferredsize-does-not-work" target="_blank" rel="external">stackoverflow论坛</a>中也有不少提问，没有统一的解决办法，在论坛回复中可以看出大多数人是没遇到的。之后开始怀疑Linux之前是不是被我卸载东西搞坏了，又放到了windows系统环境下试了试，同样出现问题。晚饭过后，扒拉开worldwind api说明，发现是继承的javax.media.opengl.awt.GLCanvas里的问题。</p>
<h2 id="出错原因：">出错原因：</h2><p>JOGL的引用，我是按照官方jogamp.org下载的jogamp-all-platforms.7z来的。worldwind包里gluegen-rt.jar和jogl-all.jar与官方的jar不同。因此，问题就出这里了，将worldwind包里的这两个JOGL的文件拷贝，并引用到Eclipse工程的external_lib中即可，不用官方的最新版。<br><strong>注意：</strong><br>Linux 32位，需要以下四个：gluegen-rt.jar,gluegen-rt-natives-linux-i586.jar,jogl-all.jar,jogl-all-natives-linux-i586.jar<br>Linux 64位，需要以下四个：gluegen-rt.jar,gluegen-rt-natives-linux-amd64.jar,jogl-all.jar,jogl-all-natives-linux-amd64.jar<br>windows 32位，需要以下四个：gluegen-rt.jar,gluegen-rt-natives-windows-i586.jar,jogl-all.jar,jogl-all-natives-windows-i586.jar<br>windows 64位环境下，需要以下四个：gluegen-rt.jar,gluegen-rt-natives-windows-amd64.jar,jogl-all.jar,jogl-all-natives-windows-amd64.jar</p>
<h2 id="Demo运行结果：">Demo运行结果：</h2><p><img src="http://ww2.sinaimg.cn/mw690/87f64593gw1evru90g1dzj20tm0m4akm.jpg" alt=""></p>
<h2 id="代码：">代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gov.nasa.worldwind.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gov.nasa.worldwind.Model;</span><br><span class="line"><span class="keyword">import</span> gov.nasa.worldwind.WorldWind;</span><br><span class="line"><span class="keyword">import</span> gov.nasa.worldwind.avlist.AVKey;</span><br><span class="line"><span class="keyword">import</span> gov.nasa.worldwind.awt.WorldWindowGLCanvas;</span><br><span class="line"><span class="keyword">import</span> gov.nasa.worldwind.util.StatusBar;</span><br><span class="line"><span class="keyword">import</span> gov.nasa.worldwindx.examples.LayerPanel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Dimension;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDemo1</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> WorldWindowGLCanvas worldWindowGLCanvas; </span><br><span class="line">	<span class="keyword">protected</span> StatusBar statusBar;					</span><br><span class="line">	<span class="keyword">protected</span> Model modelEarth;</span><br><span class="line">	<span class="keyword">protected</span> LayerPanel layerPanel; </span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AppDemo1</span> <span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="comment">//按指定尺寸创建画布</span></span><br><span class="line">		Dimension canvasSize = <span class="keyword">new</span> Dimension(<span class="number">850</span>, <span class="number">650</span>);</span><br><span class="line">		<span class="keyword">this</span>.worldWindowGLCanvas = <span class="keyword">new</span> WorldWindowGLCanvas();</span><br><span class="line">		<span class="keyword">this</span>.worldWindowGLCanvas.setPreferredSize(canvasSize);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//创建Earth模型，并与画面绑定</span></span><br><span class="line">		modelEarth = (Model) WorldWind.createConfigurationComponent(AVKey.MODEL_CLASS_NAME);</span><br><span class="line">		<span class="keyword">this</span>.worldWindowGLCanvas.setModel(modelEarth);</span><br><span class="line">		<span class="keyword">this</span>.add(<span class="keyword">this</span>.worldWindowGLCanvas, BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//增加状态栏</span></span><br><span class="line">		<span class="keyword">this</span>.statusBar = <span class="keyword">new</span> StatusBar();</span><br><span class="line">		<span class="keyword">this</span>.add(statusBar, BorderLayout.PAGE_END);</span><br><span class="line">		<span class="keyword">this</span>.statusBar.setEventSource(worldWindowGLCanvas);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//显示图层面板</span></span><br><span class="line">		layerPanel = <span class="keyword">new</span> LayerPanel(worldWindowGLCanvas);</span><br><span class="line">		<span class="keyword">this</span>.add(layerPanel, BorderLayout.WEST);</span><br><span class="line">		<span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">		<span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">		<span class="keyword">this</span>.setSize(canvasSize);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		String title = <span class="string">"系统"</span>;</span><br><span class="line">		AppDemo1 app = <span class="keyword">new</span> AppDemo1();  </span><br><span class="line">		app.setTitle( <span class="string">"WorldWindDemo"</span>+<span class="string">":"</span> + title); </span><br><span class="line">		app.setVisible(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考资料">参考资料</h2><blockquote>
<p>1.《World wind Java三维地理信息系统开发技术指南》 机械工业出版社</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[由JOGL.Jar引发的WorldWindowGLCanvas中找不到setPreferredSize()函数的问题]]>
    
    </summary>
    
      <category term="Java" scheme="http://deTrident.github.io/tags/Java/"/>
    
      <category term="OpenGIS" scheme="http://deTrident.github.io/tags/OpenGIS/"/>
    
      <category term="WorldWind" scheme="http://deTrident.github.io/tags/WorldWind/"/>
    
      <category term="GIS" scheme="http://deTrident.github.io/categories/GIS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[舒尔特方格(SchulteGrid)游戏C#实现]]></title>
    <link href="http://deTrident.github.io/2015/06/06/Schulte-Grid/"/>
    <id>http://deTrident.github.io/2015/06/06/Schulte-Grid/</id>
    <published>2015-06-06T04:16:34.000Z</published>
    <updated>2015-09-05T13:25:38.332Z</updated>
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>观察网上的一个flash小游戏，对照着，做了一个C#版本的。<br><a href="https://github.com/deTrident/MyAPP/raw/master/SchulteGrid.exe" target="_blank" rel="external">舒尔特方格游戏下载地址</a></p>
<h2 id="游戏说明">游戏说明</h2><p>舒尔特方格(Schulte Grid)是在一张方形卡片上画上 1cm × 1cm 的 25 个方格，格子内任意填写上阿拉伯数字1-25 等共25个数字。训练时，要求被测者用手指按 1-25的顺序依次指出其位置，同时诵读出声，记录所用时间。点完25个数字所用时间越短，注意力水平越高。（来自百度百科）</p>
<h2 id="效果">效果</h2><p><img src="http://ww3.sinaimg.cn/mw690/87f64593gw1evrw2x991yj20bk0dlabx.jpg" alt=""></p>
<h2 id="Show_me_Code">Show me Code</h2><a id="more"></a>
<blockquote>
<p>MainForm.cs<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SchulteForm</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainForm</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="preprocessor">#<span class="keyword">region</span> 全局成员字段</span></span><br><span class="line">        HelpBox hb; <span class="comment">//帮助对话框</span></span><br><span class="line">        SchulteForm.Controls.Numbers nbs; <span class="comment">//实例化按钮矩阵类</span></span><br><span class="line">        Stopwatch stopWatch = <span class="keyword">new</span> Stopwatch(); <span class="comment">//计时器实例化</span></span><br><span class="line">        Thread thd ;</span><br><span class="line">        List&lt;Button&gt; listbu= <span class="keyword">new</span> List&lt;Button&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="preprocessor">#<span class="keyword">endregion</span></span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainForm</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainForm_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            nbs = <span class="keyword">new</span> Controls.Numbers();</span><br><span class="line">            nbs.InitNumbers(<span class="keyword">this</span>.tableLayoutPanel, listbu);</span><br><span class="line">            nbs.RandomNumbers(<span class="keyword">ref</span> listbu);</span><br><span class="line">            <span class="keyword">foreach</span> (Control col <span class="keyword">in</span> listbu)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//Console.WriteLine(col.Text);</span></span><br><span class="line">                <span class="keyword">if</span> (col.Text == <span class="string">"1"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    col.Click += <span class="keyword">new</span> EventHandler(col_Click);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (col.Text == <span class="string">"25"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    col.Click += <span class="keyword">new</span> EventHandler(col_OverClick);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (col.Text != <span class="string">"25"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    col.Click += <span class="keyword">new</span> EventHandler(col_NumClick);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">col_OverClick</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (stopWatch.IsRunning == <span class="keyword">true</span> &amp; i==<span class="number">25</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stopWatch.Stop();</span><br><span class="line">                StartButton.Text = <span class="string">"开始游戏"</span>;</span><br><span class="line">                thd.Abort();</span><br><span class="line">                <span class="comment">//Label.CheckForIllegalCrossThreadCalls = true;</span></span><br><span class="line">                DialogResult dr = MessageBox.Show(<span class="string">"Your Time:"</span> + timeLabel.Text, <span class="string">"Done"</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">                Button btn = sender <span class="keyword">as</span> Button;</span><br><span class="line">                btn.Click -= <span class="keyword">new</span> System.EventHandler(col_OverClick); <span class="comment">//事件队列，有顺序！</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (dr == DialogResult.OK)</span><br><span class="line">                &#123;</span><br><span class="line">                    stopWatch.Reset();</span><br><span class="line">                    <span class="comment">//btn.Click -= new System.EventHandler(col_NumClick);</span></span><br><span class="line">                    ReStartButton_Click(sender,e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">col_NumClick</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            nbs.ResetNumbersColor(<span class="keyword">ref</span> listbu);</span><br><span class="line">            Button btn = sender <span class="keyword">as</span> Button;</span><br><span class="line">            <span class="comment">//MessageBox.Show(btn.Text);</span></span><br><span class="line">            <span class="comment">//btn.BackColor = SystemColors.Control;</span></span><br><span class="line">            nbs.ClickNumbers(<span class="keyword">ref</span> btn, <span class="keyword">ref</span> i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">col_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (stopWatch.IsRunning == <span class="keyword">false</span> &amp; StartButton.Text == <span class="string">"开始游戏"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                thd = <span class="keyword">new</span> Thread(RunWatch);</span><br><span class="line">                thd.IsBackground = <span class="keyword">true</span>;</span><br><span class="line">                Label.CheckForIllegalCrossThreadCalls = <span class="keyword">false</span>;</span><br><span class="line">                stopWatch.Start();</span><br><span class="line">                StartButton.Text = <span class="string">"暂停游戏"</span>;</span><br><span class="line">                thd.Start();</span><br><span class="line">            &#125;</span><br><span class="line">            Button btn = sender <span class="keyword">as</span> Button;</span><br><span class="line">            btn.Click -= <span class="keyword">new</span> System.EventHandler(col_Click); <span class="comment">//取消事件，因为点击完1后，就要点击2了，就不需要这个事件了；并且，防止“重新开始”，变成不是1的数字，误触</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainForm_HelpRequested</span>(<span class="params"><span class="keyword">object</span> sender, HelpEventArgs hlpevent</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hb == <span class="keyword">null</span> || hb.IsDisposed)</span><br><span class="line">            &#123;</span><br><span class="line">                hb = <span class="keyword">new</span> HelpBox();</span><br><span class="line">            &#125;</span><br><span class="line">            hb.Show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainForm_HelpButtonClicked</span>(<span class="params"><span class="keyword">object</span> sender, CancelEventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hb == <span class="keyword">null</span> || hb.IsDisposed)</span><br><span class="line">            &#123;</span><br><span class="line">                hb = <span class="keyword">new</span> HelpBox();</span><br><span class="line">            &#125;</span><br><span class="line">            hb.Show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartButton_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//1.点击开始游戏，开始计时，变成暂停游戏</span></span><br><span class="line">            <span class="comment">//2.点击数字1开始游戏</span></span><br><span class="line">            <span class="comment">//3.点击暂停游戏，暂停时间，再次点击开始计时</span></span><br><span class="line">            <span class="keyword">if</span> (StartButton.Text == <span class="string">"开始游戏"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                thd = <span class="keyword">new</span> Thread(RunWatch);</span><br><span class="line">                thd.IsBackground = <span class="keyword">true</span>;</span><br><span class="line">                Label.CheckForIllegalCrossThreadCalls = <span class="keyword">false</span>;</span><br><span class="line">                stopWatch.Start();</span><br><span class="line">                StartButton.Text = <span class="string">"暂停游戏"</span>;</span><br><span class="line">                thd.Start();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                stopWatch.Stop();</span><br><span class="line">                StartButton.Text = <span class="string">"开始游戏"</span>;</span><br><span class="line">                thd.Abort();</span><br><span class="line">                <span class="comment">//Label.CheckForIllegalCrossThreadCalls = true;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReStartButton_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//1.计时器清零</span></span><br><span class="line">            <span class="comment">//2.随机数重新产生</span></span><br><span class="line">            <span class="comment">//3. i =1</span></span><br><span class="line">            <span class="comment">//4. 重新设置颜色</span></span><br><span class="line">            <span class="comment">//5. 重置前25按钮的事件要取消</span></span><br><span class="line">            stopWatch.Stop();</span><br><span class="line">            stopWatch.Reset();</span><br><span class="line">            StartButton.Text = <span class="string">"开始游戏"</span>;</span><br><span class="line">            i = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (Control col <span class="keyword">in</span> listbu)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (col.Text == <span class="string">"1"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    col.Click -= <span class="keyword">new</span> System.EventHandler(col_Click);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (col.Text == <span class="string">"25"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    col.Click -= <span class="keyword">new</span> System.EventHandler(col_OverClick);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (col.Text != <span class="string">"25"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    col.Click -= <span class="keyword">new</span> EventHandler(col_NumClick);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nbs.RandomNumbers(<span class="keyword">ref</span> listbu);</span><br><span class="line">            <span class="keyword">foreach</span> (Control col <span class="keyword">in</span> listbu)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//Console.WriteLine(col.Text);</span></span><br><span class="line">                <span class="keyword">if</span> (col.Text == <span class="string">"1"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    col.Click += <span class="keyword">new</span> EventHandler(col_Click);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (col.Text == <span class="string">"25"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    col.Click += <span class="keyword">new</span> EventHandler(col_OverClick);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (col.Text != <span class="string">"25"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    col.Click += <span class="keyword">new</span> EventHandler(col_NumClick);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nbs.ResetNumbersColor(<span class="keyword">ref</span> listbu);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RunWatch</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//stopWatch.Stop();</span></span><br><span class="line">            <span class="comment"><span class="xmlDocTag">///</span>/ Get the elapsed time as a TimeSpan value.</span></span><br><span class="line">            TimeSpan ts;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">                    ts = stopWatch.Elapsed;</span><br><span class="line">                    <span class="comment">// Format and display the TimeSpan value.</span></span><br><span class="line">                    <span class="comment">//string elapsedTime =</span></span><br><span class="line">                    timeLabel.Text = String.Format(<span class="string">"&#123;0:00&#125;:&#123;1:00&#125;:&#123;2:00&#125;.&#123;3:00&#125;"</span>,</span><br><span class="line">                        ts.Hours, ts.Minutes, ts.Seconds,</span><br><span class="line">                        ts.Milliseconds / <span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception)</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//timeLabel.Text = stopWatch.ElapsedTicks.ToString();</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainForm_FormClosing</span>(<span class="params"><span class="keyword">object</span> sender, FormClosingEventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (thd!=<span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                thd.Abort();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//Label.CheckForIllegalCrossThreadCalls = true;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Numbers.cs<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SchulteForm.Controls</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Numbers</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Button b;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitNumbers</span>(<span class="params">TableLayoutPanel tbp, List&lt;Button&gt; listbu</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Button bu = <span class="keyword">new</span> Button();</span><br><span class="line">                    bu.Dock = DockStyle.Fill;</span><br><span class="line">                    bu.Text = (i*<span class="number">5</span>+j+<span class="number">1</span>).ToString();</span><br><span class="line">                    bu.Font = <span class="keyword">new</span> Font(<span class="string">"Consolas"</span>, <span class="number">30</span>, FontStyle.Bold |FontStyle.Italic);</span><br><span class="line">                    listbu.Add(bu);</span><br><span class="line">                    tbp.Controls.Add(bu, j, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RandomNumbers</span>(<span class="params"><span class="keyword">ref</span> List&lt;Button&gt; listbu</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span>[] a = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span> &#125;;</span><br><span class="line">            Random r = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">int</span> b = a.Length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = r.Next(b);</span><br><span class="line">                <span class="comment">//Console.WriteLine(a[temp]);</span></span><br><span class="line">                <span class="comment">//int temp1 = a[temp];</span></span><br><span class="line">                <span class="comment">//a[temp] = a[b - 1];</span></span><br><span class="line">                <span class="comment">//a[b - 1] = temp1;</span></span><br><span class="line">                <span class="keyword">string</span> temp1 = listbu[temp].Text;</span><br><span class="line">                listbu[temp].Text = listbu[b - <span class="number">1</span>].Text;</span><br><span class="line">                listbu[b - <span class="number">1</span>].Text = temp1;</span><br><span class="line">                b -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClickNumbers</span>(<span class="params"><span class="keyword">ref</span> Button bu,<span class="keyword">ref</span> <span class="keyword">int</span> i</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">           </span><br><span class="line">            <span class="comment">//Console.WriteLine(col.Text);</span></span><br><span class="line">            <span class="comment">//Button btn = col as Button;</span></span><br><span class="line">            <span class="keyword">if</span> (bu.Text == i.ToString())</span><br><span class="line">            &#123;</span><br><span class="line">                bu.BackColor = Color.Orange;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                bu.BackColor = Color.Red;</span><br><span class="line">            &#125;</span><br><span class="line">              </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ResetNumbersColor</span>(<span class="params"><span class="keyword">ref</span> List&lt;Button&gt; listbu</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">foreach</span> (Control col <span class="keyword">in</span> listbu)</span><br><span class="line">            &#123;</span><br><span class="line">                col.BackColor = SystemColors.Control;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[舒尔特方格]]>
    
    </summary>
    
      <category term="C#" scheme="http://deTrident.github.io/tags/C/"/>
    
      <category term="C#" scheme="http://deTrident.github.io/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[借助批处理和ENVI/IDL实现批量高分数据从解压缩到RPC校正（二）]]></title>
    <link href="http://deTrident.github.io/2015/05/23/RPCortho-batch-2/"/>
    <id>http://deTrident.github.io/2015/05/23/RPCortho-batch-2/</id>
    <published>2015-05-23T04:36:57.000Z</published>
    <updated>2015-09-05T13:02:47.169Z</updated>
    <content type="html"><![CDATA[<p>前段时间，帮一项目负责人批量处理数据，虽然利用ENVI软件操作十分简单，选好RPC文件，点点按钮，等待处理完一景后，再重复点点按钮。然而，当数据量巨大，单景卫星数据影像RPC校正时间又长，让人去盯着，是不可能的事。</p>
<h2 id="所需环境">所需环境</h2><ol>
<li>上一篇7-zip批处理解压后数据</li>
<li>ENVI5.1/IDL8.3及以上</li>
</ol>
<h2 id="程序下载">程序下载</h2><p>所需ENVI版本安装好，双击即可使用<br><a href="https://raw.githubusercontent.com/deTrident/MyAPP/master/rpcortho_batch.sav" target="_blank" rel="external">rpcortho_batch.sav</a><br><a id="more"></a></p>
<h2 id="主要代码">主要代码</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOR NX =0,FileCount -1 DO BEGIN&#10;  ImageFile = GeoTiffFiles[NX]&#10;  basename = FILE_BASENAME(ImageFile)&#10;  indexstr = STRPOS( STRUPCASE(basename),&#34;.TIFF&#34;)&#10;  out_name = STRMID(basename,0,indexstr)&#10;  out_uri =output + out_name + &#39;_rpc&#39;; + &#39;.tiff&#39;&#10;  Raster = e.OPENRASTER(ImageFile)&#10;  ; &#26032;&#24314;RPCOrthorectification ENVITask&#10;  Task = ENVITASK(&#39;RPCOrthorectification&#39;)&#10;  ; &#35774;&#32622;Task&#30340;&#36755;&#20837;&#36755;&#20986;&#21442;&#25968;&#10;  Task.Input_raster = Raster&#10;  Task.Dem_raster = DEM&#10;  Task.Dem_is_height_above_ellipsoid = 0&#10;  Task.Output_raster_uri = out_uri&#10;  ;Task.Output_Pixel_Size = 1000&#10;  ; &#25191;&#34892;Task&#10;  CATCH, errorStatus&#10;  Task.EXECUTE, Error=error</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[对高分数据从.tar压缩格式批处理解压，到自动批处理RPC校正]]>
    
    </summary>
    
      <category term="IDL" scheme="http://deTrident.github.io/tags/IDL/"/>
    
      <category term="RPC" scheme="http://deTrident.github.io/tags/RPC/"/>
    
      <category term="batch" scheme="http://deTrident.github.io/tags/batch/"/>
    
      <category term="IDL" scheme="http://deTrident.github.io/categories/IDL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[借助批处理和ENVI/IDL实现批量高分数据从解压缩到RPC校正（一）]]></title>
    <link href="http://deTrident.github.io/2015/05/22/RPCortho-batch-1/"/>
    <id>http://deTrident.github.io/2015/05/22/RPCortho-batch-1/</id>
    <published>2015-05-22T12:11:50.000Z</published>
    <updated>2015-09-05T13:03:45.003Z</updated>
    <content type="html"><![CDATA[<p>前段时间，帮一项目负责人批量处理数据，虽然利用ENVI软件操作十分简单，选好RPC文件，点点按钮，等待处理完一景后，再重复点点按钮。然而，当数据量巨大，单景卫星数据影像RPC校正时间又长，让人去盯着，是不可能的事。</p>
<h2 id="所需环境">所需环境</h2><ol>
<li>tar数据</li>
<li>安装7-zip</li>
</ol>
<h2 id="代码如下">代码如下</h2><a id="more"></a>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">echo</span> off</span><br><span class="line"><span class="keyword">setlocal</span> ENABLEDELAYEDEXPANSION</span><br><span class="line"></span><br><span class="line">::----更换<span class="number">7</span>z程序所在目录----</span><br><span class="line"><span class="keyword">set</span> rar="C:\Program Files (x86)\<span class="number">7</span>-Zip\<span class="number">7</span>z.exe"</span><br><span class="line"><span class="keyword">set</span> log="%~dp0rarlog.log"</span><br><span class="line"> </span><br><span class="line">::----压缩文件所在目录----</span><br><span class="line"><span class="keyword">set</span> p=".\Data"</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> <span class="envvar">%p%</span></span><br><span class="line"><span class="flow">for</span> /r <span class="envvar">%%i</span> <span class="flow">in</span> (.) <span class="flow">do</span> (</span><br><span class="line"><span class="function">    call:<span class="title">fun</span> "%%<span class="title">i</span>"</span><br><span class="line">    <span class="title">call:fun2</span> "%%<span class="title">i</span>"</span><br><span class="line">)</span><br><span class="line"><span class="title">pause</span></span><br><span class="line"><span class="title">goto:eof</span></span><br><span class="line">::///////////////////////////////////////</span><br><span class="line">:<span class="title">fun</span></span><br><span class="line">    <span class="title">cd</span> %1</span><br><span class="line">    <span class="title">for</span> /<span class="title">f</span> "<span class="title">delims</span>=" %%<span class="title">i</span> <span class="title">in</span> ('<span class="title">dir</span> /<span class="title">a</span>-<span class="title">d</span> /<span class="title">b</span>') <span class="title">do</span> (</span><br><span class="line">        <span class="title">echo</span> %%<span class="title">i</span></span><br><span class="line">        <span class="title">if</span> "%%~<span class="title">xi</span>" <span class="title">equ</span> ".<span class="title">gz</span>" (</span><br><span class="line">            %<span class="title">rar</span>% <span class="title">e</span> "%%<span class="title">i</span>" -<span class="title">y</span></span><br><span class="line">            <span class="title">if</span> !<span class="title">errorlevel</span>! <span class="title">equ</span> 0 (</span><br><span class="line">                ::<span class="title">del</span> /<span class="title">f</span>/<span class="title">q</span> "%%<span class="title">i</span>"</span><br><span class="line">                &gt;&gt;%<span class="title">log</span>% <span class="title">echo</span> %<span class="title">date</span>% %<span class="title">time</span>%         <span class="title">Success</span>: %%~<span class="title">dpnxi</span></span><br><span class="line">            ) <span class="title">else</span> (</span><br><span class="line">                &gt;&gt;%<span class="title">log</span>% <span class="title">echo</span> %<span class="title">date</span>% %<span class="title">time</span>%         <span class="title">Error</span>: %%~<span class="title">dpnxi</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">:<span class="title">fun2</span></span><br><span class="line">    <span class="title">cd</span> %1</span><br><span class="line">    <span class="title">for</span> /<span class="title">f</span> "<span class="title">delims</span>=" %%<span class="title">i</span> <span class="title">in</span> ('<span class="title">dir</span> /<span class="title">a</span>-<span class="title">d</span> /<span class="title">b</span>') <span class="title">do</span> (</span><br><span class="line">        <span class="title">echo</span> %%<span class="title">i</span></span><br><span class="line">        <span class="title">if</span> "%%~<span class="title">xi</span>" <span class="title">equ</span> ".<span class="title">tar</span>" (</span><br><span class="line">            %<span class="title">rar</span>% <span class="title">e</span> "%%<span class="title">i</span>" -<span class="title">y</span></span><br><span class="line">            <span class="title">if</span> !<span class="title">errorlevel</span>! <span class="title">equ</span> 0 (</span><br><span class="line">                <span class="title">del</span> /<span class="title">f</span>/<span class="title">q</span> "%%<span class="title">i</span>"</span><br><span class="line">                &gt;&gt;%<span class="title">log</span>% <span class="title">echo</span> %<span class="title">date</span>% %<span class="title">time</span>%         <span class="title">Success</span>: %%~<span class="title">dpnxi</span></span><br><span class="line">            ) <span class="title">else</span> (</span><br><span class="line">                &gt;&gt;%<span class="title">log</span>% <span class="title">echo</span> %<span class="title">date</span>% %<span class="title">time</span>%         <span class="title">Error</span>: %%~<span class="title">dpnxi</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"><span class="title">goto:eof</span></span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[对高分数据从.tar压缩格式批处理解压，到自动批处理RPC校正]]>
    
    </summary>
    
      <category term="IDL" scheme="http://deTrident.github.io/tags/IDL/"/>
    
      <category term="RPC" scheme="http://deTrident.github.io/tags/RPC/"/>
    
      <category term="batch" scheme="http://deTrident.github.io/tags/batch/"/>
    
      <category term="Batch" scheme="http://deTrident.github.io/categories/Batch/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenCV无法正常启动Oxc000007b错误]]></title>
    <link href="http://deTrident.github.io/2015/05/02/OpenCV-Oxc000007b-Error/"/>
    <id>http://deTrident.github.io/2015/05/02/OpenCV-Oxc000007b-Error/</id>
    <published>2015-05-02T13:27:26.000Z</published>
    <updated>2015-07-22T07:51:01.767Z</updated>
    <content type="html"><![CDATA[<h2 id="环境">环境</h2><p>在之前win7系统下一直没见过这个错误，更换到win8.1 64bit，在一系列非人类配置完成后，编译成功，运行却报错。显示<a id="more"></a><strong>“无法正常启动Oxc000007b错误”</strong>。搜索了一下，好像出现这个问题的不少，折磨了好大一批人。OpenCV我使用的版本是2.4.9，引用的是自己根据<a href="http://www.nmtree.net/2014/03/19/windows_build-opencv-with-cmake-and-vs2013.html" target="_blank" rel="external">柠檬树</a>的教程编译的库。测试程序为VS2013+win32 console application。</p>
<h2 id="解决方案">解决方案</h2><blockquote>
<p>网络解决方案(对环境变量的修改，记得注销系统来生效)<br>    1.环境变量里原来只有D:\OpenCV2\build\x64\vc10\bin加上D:\OpenCV2\build\x86\vc10\bin就OK了<br>    2.64位程序环境变量里添加D:\opencv\build\common\tbb\intel64\vc10；32位要添加D:\opencv\build\common\tbb\ia32\vc10</p>
</blockquote>
<h3 id="我的测试：">我的测试：</h3><ul>
<li><p>更换debug——win32平台为x64平台，未出现该问题（ps:可能跟window系统有关)</p>
</li>
<li><p>升级OpenCV版本到2.4.11，问题没再出现<font color="red">【2015-6-1更新】</font></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[OpenCV无法正常启动Oxc000007b错误]]>
    
    </summary>
    
      <category term="OpenCV2" scheme="http://deTrident.github.io/tags/OpenCV2/"/>
    
      <category term="OpenCV" scheme="http://deTrident.github.io/categories/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Review TinyXML]]></title>
    <link href="http://deTrident.github.io/2015/04/21/Review-TinyXML/"/>
    <id>http://deTrident.github.io/2015/04/21/Review-TinyXML/</id>
    <published>2015-04-21T13:18:46.000Z</published>
    <updated>2015-07-22T14:50:07.158Z</updated>
    <content type="html"><![CDATA[<p>最近项目读取影像数据metadata，再次用到TinyXML，已经不那么熟练。之前使用还是专题产品系统的时候，在副研师兄大框架下引用的。最近有点空，整理下相关内容，备以后查询回顾。<br><a id="more"></a></p>
<h2 id="特性：">特性：</h2><p>TinyXML是目前C++的XML解析器用起来最友好的，作为轻量开源跨平台库（可商用），对xml的文本的解析提供了很大的便利。解析库模型在解析xml文件后，在内存中将信息转化为文档对象模型(DOM)使得可读、写、存，并利用树形结构表示这些元素之间的顺序和嵌套关系。支持UTF-8编码和前64k个字符实体。<br><strong>注意：</strong>不解析文档类型定义(DTDs)和可扩展样式表语言XSLs<br>例如下面DTD语法在TinyXML里是不做解析的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE Archiv [</span><br><span class="line">	 &lt;!ELEMENT Comment (#PCDATA)&gt;</span><br><span class="line">]&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>所以用于浏览器或更复杂的XML需要，目前的TinyXML是不能满足的。</p>
<h2 id="使用：">使用：</h2><p>下载<a href="http://sourceforge.net/projects/tinyxml/" target="_blank" rel="external">TinyXML</a>，解压缩后，将根目录下tinyxml.h、tinyxml.cpp、tinystr.h、tinystr.cpp、tinyxmlerror.cpp、tinyxmlparser.cpp六个文件拷贝添加到将要使用的Cpp工程即可，需要操作XML文件的地方，在头文件中加入<code>#include&quot;tinyxml.h&quot;</code>。如需要，可编译成dll（技能点加强：在tinyxml.h改相关属性来自定义特性）</p>
<h2 id="操作：">操作：</h2><p><img src="http://grinninglizard.com/tinyxmldocs/classTiXmlBase.png" alt="classTiXmlBase" title="TiXMlBase官方类图"><br>        （一图以蔽之，官方大法好）</p>
<blockquote>
<p>类列表<br>    TiXmlBase：整个TinyXML模型的基类。<br>    TiXmlAttribute：XML中的元素的属性对（name-value)。<br>    TiXmlNode：DOM结构中的节点。<br>    TiXmlComment：XML中的注释<br>    TiXmlDeclaration：XML中的声明部分，在开始处，即&lt;？versiong=”1.0” ?&gt;。<br>    TiXmlDocument：XML的整个文档，即顶端节点。<br>    TiXmlElement：XML的元素，为一个容器。<br>    TiXmlText：XML的文字。<br>    TiXmlUnknown：任何未被TinyXML识别的保存成了这个未知。<br>    TiXmlHandler：定义了针对XML的一些操作。</p>
</blockquote>
<h2 id="代码段：">代码段：</h2><p>据详细的tutorial<br><a href="http://grinninglizard.com/tinyxmldocs/tutorial0.html" target="_blank" rel="external">grinninglizard.com/tinyxmldocs/tutorial0.html</a><br>不怕不会用呀，备查</p>
]]></content>
    <summary type="html">
    <![CDATA[TinyXML]]>
    
    </summary>
    
      <category term="TinyXML" scheme="http://deTrident.github.io/tags/TinyXML/"/>
    
      <category term="C++" scheme="http://deTrident.github.io/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[regular expression 正则表达式]]></title>
    <link href="http://deTrident.github.io/2015/04/12/regular-expression/"/>
    <id>http://deTrident.github.io/2015/04/12/regular-expression/</id>
    <published>2015-04-12T03:00:06.000Z</published>
    <updated>2015-09-05T12:27:21.118Z</updated>
    <content type="html"><![CDATA[<p>正则表达式超赞教程 (<em>^__^</em>) <a id="more"></a><br>正则表达式30分钟入门教程 <a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">http://deerchao.net/tutorials/regex/regex.htm</a><br>（30分钟学不完，请自觉回家种地）</p>
<p>Python抓包，正则表达式必备，从<a href="http://www.cnblogs.com/huxi" target="_blank" rel="external">AstralWind</a><code>大神博客</code>直接引图，搬运工角色扮演中→_→</p>
<p><img src="http://ww2.sinaimg.cn/mw690/87f64593gw1eubddbh1duj20m71brb29.jpg" alt="Python-Regex" title="Python正则表达式图"></p>
]]></content>
    <summary type="html">
    <![CDATA[正则表达式]]>
    
    </summary>
    
      <category term="Python" scheme="http://deTrident.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://deTrident.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++易爆bug点]]></title>
    <link href="http://deTrident.github.io/2015/04/05/Cpp-common-error/"/>
    <id>http://deTrident.github.io/2015/04/05/Cpp-common-error/</id>
    <published>2015-04-05T02:12:14.000Z</published>
    <updated>2015-09-05T12:38:18.269Z</updated>
    <content type="html"><![CDATA[<p>1.将复杂的公式转化为可递推的简单表达式，通过循环的方法求解或者趋近<br>2.continue跳转到循环开头，跳过循环块中后面代码<br>3.break控制无限循环，break退出当前循环，return退出当前函数模块<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    DoSomethingRepeatedly;</span><br><span class="line">    <span class="keyword">if</span>(expression)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    DoSomething;</span><br><span class="line">    <span class="keyword">if</span>()</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>()<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>4.while循环，0表示false，其他都为true，-1也是true</p>
<p>5.函数重载，处理不同情况的参数的函数</p>
<p>6.变量声明后，养成初始化的习惯，贴别是指针，要初始化为NULL。指针如果未初始化，否则它包含的是随机值，可能导致程序访问非法单元，使程序崩溃。</p>
<p>7.动态分配内存<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Type* Pointer = <span class="keyword">new</span> Type;</span><br><span class="line"><span class="keyword">delete</span> Pointer;</span><br><span class="line"></span><br><span class="line">Type* Pointer= <span class="keyword">new</span> Type[NumElemets];</span><br><span class="line"><span class="keyword">delete</span>[] Pointer;</span><br></pre></td></tr></table></figure></p>
<p>对于使用new[…]分配的内存块，需要使用delete[]来释放；对于new为单个元素分配的内存，需要delete来释放。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line">   <span class="preprocessor">#<span class="keyword">include</span>&lt;string&gt;</span></span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line">   </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Enter your name:"</span>;</span><br><span class="line"><span class="built_in">string</span> Name;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;Name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Add 1 to reserve space for a terminating null</span></span><br><span class="line"><span class="keyword">int</span> CharsToAllocate = Name.length()+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* CopyOfName = <span class="keyword">new</span> <span class="keyword">char</span>[CharsToAllocate];</span><br><span class="line"></span><br><span class="line">strcopy(CopyOfName,Name.c_str());</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Dynamically allocated buffer contains: "</span>&lt;&lt;CopyOfName&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] CopyOfName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>8.指针的递增递减运算（++ —）<br>Type<em> pType = Address;<br>++pType后，将指向Address + sizeof(Type)<br>cout&lt;&lt;</em>(++pType)</p>
<p>9.const用于指针<br>指针指向数据为常量，不能修改，但可以修改指针包含的地址，即指针可以指向其他地方</p>
<p>int HoursInDay = 24;<br>const int<em> pInteger = &HoursInDay;//NO! cannot use pInteger to change HoursInDay<br>int MonthsInYear = 12;<br>pInteger = &amp; MonthsInYear;//OK!
</em>pInteger = 13;//NO! Compile fails:Cannot change data<br>int <em> pAnotherPointerToInt = pInteger;//NO! Compile fails:Cannot assign const to non-const<br>指针包含的地址是常量，不能修改，但可修改指针指向数据<br>int DaysInMonth = 30;<br>int</em> const pDaysInMonth = &DaysInMonth;<br><em>pDaysInMonth = 31; //OK! Value can be changed<br>int DaysInLunarMonth = 28;<br>pDaysInMonth = &DaysInLunarMonth;//NO! complie fails: cannot change address!<br>指针包含的地址以及它指向的值都是常量，不能修改（最严格）指向const数据的const的指针<br>int HoursInDay = 24;<br>const int</em> const pHoursInDay = &HoursInDay;<br>*pHoursInDay = 25;//compile fails:cannot change pointed value<br>int DaysInMonth = 30;<br>pHoursInDay = &DaysInMonth;//NO!</p>
<p>10.数组和指针有相似之处，解除引用运算符(*)可用于数组，同样数组运算符[]可用于指针</p>
<p>11.使用指针常犯的编程错误<br>内存泄露（c++运行时间越长，占用内存越多，系统的越慢，如果在new后不再需要，没有配套的delete释放，会出现这种问题。C++没有C#和java的自动垃圾收集器）<br>int<em> pNumbers = new int[5];//initial allocation<br>//use pointer pNumbers<br>…<br>//forget to release using delete[] pNumbers;<br>…<br>//make another allocation and overwrite the pointer<br>pNumbers = new int[0];//leaks the previously allocated memory 泄露<br>指针指向无效内存单元（常见导师应用程序崩溃的原因就是无效指针）当指针有效时再释放delete，初始化指针<br>悬浮指针/迷途指针，务必在初始化时和释放指针后将其设置为NULL，并在使用运算符</em>对指针解除引用前检查它是否有效<br>12.new发出的分配请求是否得到满足（请求分配的内存量特大或系统处于临界状态，一般不要假定内存分配能够成功，C++提供了两种确保指针有效的方法，默认方法是使用异常，引发std::bad_alloc异常）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//Request lots of memory space</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">int</span>* pAge = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">536870911</span>];</span><br><span class="line">	</span><br><span class="line"><span class="comment">//use the allocated memory</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">delete</span>[] pAge;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">catch</span>(bad_alloc)</span><br><span class="line">	</span><br><span class="line">&#123;</span><br><span class="line">		</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Memory allocation failed.Ending program"</span>&lt;&lt;endl;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有一个new变种——new(nothrow)，它不引发异常，而返回NULL，让您能够在使用指针前检查其有效性<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//Request lots of memory space,use nothrow version</span></span><br><span class="line">	<span class="keyword">int</span>* pAge = <span class="keyword">new</span>(nothrow) <span class="keyword">int</span>[<span class="number">0x1fffffff</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(pAge)  <span class="comment">//check pAge!=NULL</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//use the allocated memory</span></span><br><span class="line">		<span class="keyword">delete</span>[] pAge;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Memory allocation failed.Ending program"</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13.当参数占用大量内存，在传参的过程中，赋值给函数参数，开销大，引用很用用处（int&amp; Parameter=argument）<br>函数声明：ReturnType DoSomething(Type&amp; Parameter);<br>调用：ReturnType Result =DoSomething(argument);</p>
<p>void Calulate(const int&amp; Number,int&amp; Result)//两个引用，第一个接收输入，第二个输出结果<br>{<br>    Result = Number<em>Number; //const限制Number不用修改，所以不可以Number</em>=Number;<br>    //最好将Const用于引用参数，除非函数需要将结果存储在参数中<br>}</p>
<p>14.避免如下使用<br>    int<em> pNumber = new int;<br>    int</em> pCopy = pNumber;为释放内存，是否需要对它们都调用delete？<br>    这样是错误的，对new返回的地址，只能调用delete一次，另外，最好避免让两个指针指向相同的地址，因为对其一调用delete将导致另一个无效，另外编写程序时，应避免使用有效性不确定的指针。<br>    使用引用，比使用指针好，因为引用不像指针会失效。</p>
<p>15.类声明类似于函数声明，将类本身及其属性告诉编译器。类本身不能改变程序的行为，必须使用它，就像调用函数一样。</p>
<p>16.带默认值的构造函数<br>class Human<br>{<br>    private:<br>        string Name;<br>        int Age;<br>    public:<br>        Human(string InputName,int InputAge = 25);<br>        Human(string InputName,int InputAge):Name(InputName),Age(InputAge);<br>    …<br>}<br>int main()<br>{<br>    Human FirstMan;   //如果第二个构造注释掉，就会报错，因为当提供了构造函数后，系统不再提供默认构造，但可以Human FirstMan(“EVe”)<br>    Human FirstWoman(“EVe”,18);<br>}</p>
<p>17.析构函数是重置变量以及释放动态分配的内存和其他资源的理想场所。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyString</span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		</span><br><span class="line">MyString(<span class="keyword">const</span> <span class="keyword">char</span>* InitalInput)</span><br><span class="line">		</span><br><span class="line">&#123;</span><br><span class="line">			</span><br><span class="line"><span class="keyword">if</span>(InitalInput != NULL)</span><br><span class="line">			</span><br><span class="line">&#123;</span><br><span class="line">				</span><br><span class="line">...</span><br><span class="line">			</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">				</span><br><span class="line">Buffer = NULL;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line">		</span><br><span class="line">~MyString()</span><br><span class="line">		</span><br><span class="line">&#123;</span><br><span class="line">			</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Invoking destructor,clearing up"</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">			</span><br><span class="line"><span class="keyword">if</span>(Buffer!=NULL)</span><br><span class="line">				</span><br><span class="line"><span class="keyword">delete</span> [] Buffer;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>18.<em> 复制构造函数，确保深复制，编写类的程序必须提供<br>语法：<br>    class MyString<br>{<br>    MyString(const MyString&amp; CopySource)；<br>}<br>MyString::MyString(const MyString&amp; CopySource)<br>{<br>    //implementation code<br>}函数的名称必须和类名称一致，它的唯一的一个参数是本类型的一个引用变量，该参数是const类型，不可变的。例如：类X的拷贝构造函数的形式为X(X&amp; x)。<br>以引用方式传入的当前类的对象作为参数。这个参数是源对象的别名，您使用的它来编写自定义的复制代码，确保对所有缓冲区进行深复制。<br>没有显式地声明一个拷贝构造函数，那么，编译器将会自动生成一个默认的拷贝构造函数，该构造函数完成对象之间的位拷贝。位拷贝又称浅拷贝。自定义拷贝构造函数是一种良好的编程风格，它可以阻止编译器形成默认的拷贝构造函数，提高源码效率。深拷贝和浅拷贝的定义可以简单理解成：如果一个类拥有资源(堆，或者是其它系统资源)，当这个类的对象发生复制过程的时候，这个过程就可以叫做深拷贝，反之对象存在资源，但复制过程并未复制资源的情况视为浅拷贝。<br>类包含原始指针成员(char </em>等)，务必编写复制构造函数和复制赋值运算符。<br>编写复制构造函数时，务必将接受源对象的参数声明为const引用<br>务必将类成员声明为std::string和智能指针类(而不是原始指针)，因为它们实现了复制构造函数，可减少工作量<br>要禁止类对象被复制，可声明一个私有的复制构造函数，确保调用不能通过编译。为禁止赋值，可声明一个私有的赋值运算符。但无法禁止通过实例化多个对象来创建多名总统。<br>class President<br>{<br>    private:<br>        President(const President&amp;);<br>        President&amp; operater= (const President&amp;);<br>…<br>}<br>如何只能有一个实例的单例类？<br>使用单例的概念，它使用私有构造函数、私有赋值运算符和静态实例成员。关键字static用于类的数据成员时，该数据成员将在所有的实例之间共享。将static用于函数中声明的局部变量时，该变量的值将在两次调用之间保持不变。将static用于成员函数(方法)时，该方法将在所有成员之间共享。</p>
<p>总是应该编写一个复制构造函数吗？<br>如果类的数据成员是设计良好的智能指针、字符串类或STL容器(如std::vector)，则编译器生成的默认复制构造函数将调用成员的复制构造函数。然而，如果类包含原始指针成员（如使用int* 而不是std::vector<int>）表示的动态数组，则需要提供设计良好的复制构造函数，确保类将类对象按照值传递给函数时进行深复制，创建该数组的拷贝。</int></p>
<p>19.禁止在栈中实例化的类<br>    栈空间十分有限，如果要编写一个数据库类，其内部结构包含数据很大，应该禁止在栈上实例化它，而只允许在堆中创建其实例。关键在于将析构函数声明为私有。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">class</span> MonsterDB</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		~MonsterDB()&#123;&#125;;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DestoryInstance</span><span class="params">(MonsterDB* pInstance)</span></span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="comment">//static member can access private destructor</span></span><br><span class="line">			<span class="keyword">delete</span> pInstance;</span><br><span class="line">		&#125;<span class="comment">//如果没有将导致内存泄露</span></span><br><span class="line">		...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	MonsterDB* pMyDatabase=<span class="keyword">new</span> MonsterDB();</span><br><span class="line">	<span class="comment">//pMyDatabse-&gt;member methods(...)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//delete pMyDatabase；//private destructor cannnot be invoked</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//use static member to deallocate</span></span><br><span class="line">	MonsterDB::DestroyInstance(pMyDatabase);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>20.友元函数与友元类<br>C++中以关键字friend声明友元关系。友元可以访问与其有friend关系的类中的私有成员。友元包括友元函数和友元类。</p>
<p>21.在静态方法中使用实例变量，应显式地声明一个形参，让调用者将实参设置为this指针。</p>
<p>22.struct来自C语言，默认公有成员，公有继承基结构。与类相似，可放函数等。<br>struct Human<br>{<br>    // constructor,public by default<br>    Human(const MyString&amp; InputName,int InputAge,bool InputGender):Name(InputName),Age(InputAge),Gender(InputGender){}</p>
<pre><code><span class="function"><span class="keyword">int</span> <span class="title">GetAge</span><span class="params">()</span>
</span>{
    <span class="keyword">return</span> Age;
}
</code></pre><p>private:<br>    int Age;<br>    bool Gender;<br>    MyString Name;<br>};</p>
<p>结构实例化跟类也很像<br>Human FirstMan(“Adam”,25,true); // is an instance of struct Human</p>
<p>23.friend关键字，友元函数，友元类</p>
<p>24.访问成员，可使用句点运算符(.)，也可使用指针运算符(-&gt;)。哪种方式更好？<br>如果有一个指针对象的指针，则使用指针运算符合适；如果栈中实例化了一个对象，并将其存储到了一个局部变量中，则使用句点运算符最合适。</p>
<p>25.基类初始化——向基类传递参数<br>class Base<br>{<br>public:<br>    Base(int SomeNumber)<br>    {<br>        //Do something with SomeNumber<br>    }<br>};<br>class Derived:public Base<br>{<br>public:<br>    Derived():Base(25) //instantiate class Base with argument 25<br>    {<br>        //derived class constructor code<br>    }<br>};<br>如何调用基类中被覆盖的方法、在派生类中调用基类的方法？<br>需要使用作用域解析运算符(::)，myDinner.Fish::Swim();<br>防止在派生类中隐藏基类的方法？1.使用作用域解析运算符（myDinner.Fish::Swim()）2.在派生类中，使用using解除对方法的隐藏3.覆盖所有基类的重载版本</p>
<p>关于继承要注意的！！！<br><em>不要仅为重用微不足道的方法而创建继承层次结构。
</em>在派生类中，不要编写与基类方法同名但参数不同的方法，以免隐藏基类方法</p>
<p>26.将子对象复制给Base对象，如显示复制和通过传递参数。会产生切除问题。编译器只将复制Base部分，不是整个对象的复制，而是Base能够容纳的部分。要避免这种无意间的裁剪，不要按值传递参数，应该以指向基类的指针或const引用的方式传递。</p>
<p>27.将析构函数声明为虚函数，可避免delete用于base指针时，不会调用派生类的析构函数的情况发生。</p>
<p>28.不能被实例化的基类被称为抽象基类，从它派生出其他类，要创建抽象基类，可声明纯虚函数<br>声明方式：<br>class AbstractBase<br>{<br>public:<br>    virtual void Dosomething()=0; //pure virtual method<br>};<br>告诉编译器，派生类必须实现方法DoSomething();<br>class Derived:public AbstractBase<br>{<br>public:<br>    void DoSomething()<br>    {<br>        cout&lt;&lt;”Implemented virtual function”&lt;&lt;endl;<br>    }<br>};<br>这种基类非常适合用于定义派生类必须实现的接口。</p>
<p>29.使用虚拟继承，解决菱形问题<br>在继承层次结构中，继承多个从同一个类派生而来的基类时，如果这些基类没有采用虚拟继承，将导致二义性，这种二义性被称为菱形问题<br>class Derived1:public virtual Base<br>{<br>}</p>
<p>30.虚函数应用<br>    对于将被派生类覆盖的基类方法，务必将其声明为虚函数<br>    纯虚函数导致类变成抽象基类，且在派生类中必须提供纯虚函数的实现<br>    务必考虑使用虚继承<br>    别忘了给基类提供一个虚析构函数<br>    别忘了，编译器不允许您创建抽象基类的实例<br>    别忘了，在菱形继承层次结构中，虚继承旨在确保只有一个基类实例。<br>    用于创建继承层次结构和声明基类函数时，关键字virtual的作用不同</p>
<p>31.与函数一样，运算符可以重载(operator override)<br>运算符声明和函数极其类似：return_type operator_symbol (…parameter list…)<br>重载运算符的目的就是直观，更方便<br>单目运算符（只对一个操作数进行操作），实现全局函数或静态成员函数：++ — <em> ! &amp; ~ + - -&gt;（成员选择） 转换运算符<br>    Date&amp; operator ++ ()<br>    {<br>        ++Day;<br>        return </em>this;<br>    }</p>
<pre><code>Date <span class="keyword">operator</span> ++(<span class="keyword">int</span>)
{
    <span class="function">Date <span class="title">Copy</span><span class="params">(Day,Month,Year)</span></span>; <span class="comment">//复制当前对象，在执行递增或递减运算</span>
    ++Day;
    <span class="keyword">return</span> Copy;
}
</code></pre><p>32.不能重载的运算符<br>运算符<br>名称<br>运算符<br>名称<br>.<br>成员选择<br>?:<br>条件三目运算符<br>.*<br>指针成员选择<br>sizeof<br>获取对象/类类型的大小<br>::<br>作用域解析</p>
<p>重载：<br>务必实现让类易于运用的运算符，但不要实现无助于实现这个目的的运算符。<br>对于包含原始指针成员的类，除给它提供赋值构造函数和析构函数外，务必给它提供复制赋值运算符。<br>如果没有提供复制构造函数和复制赋值运算符，编译器将提供其默认版本，而这些版本不一定会对包含的原始指针进行深复制。<br>如果使用遵循C++11的编译器，则对于管理动态分配资源（如数组）的类，务必给它提供移动赋值运算符和移动构造函数。<br>即便没有提供移动赋值运算符和移动构造函数，编译器也不会替您创建它们，而是转而使用复制运算符和复制构造函数。</p>
<p>智能指针类的编写，需要实现运算符*和-&gt;的override，还要实现析构函数，并对复制赋值和复制构造的情形深思熟虑。</p>
<p>33.C++类型转换运算符</p>
<p>除dynamic_cast类型转换外，都是可以避免的，仅当需要满足遗留应用程序的需求时，才需要使用其他类型转换运算符。<br>向下转换（base-&gt;derived），除非使用dynamic_cast，否则都不安全！使用dynamic_cast时，记得对转换得到的指针进行检查，看其是否有效！</p>
<p>创建继承层次结构时，应尽量将函数声明为虚函数。在通过基类指针调用这些函数时，如果该指针指向的是派生类对象，将调用相应类的函数版本。<br>static_cast<br>用于在相关类型的指针之间进行转换，还可以显式地执行标准数据类型的类型转换（原本可自动隐式转换）<br>使用static_cast可将指针向上转换为基类型，也可向下转换为派生类型。<br>Derived objDerived;<br>Base<em> pBase=&objDerived; //upcast ok!<br>Derived</em> pDerived=pBase; //Error<br>Derived<em> pDerived=static_cast&lt;Derived</em>&gt;(pBase); // pass!<br>只验证指针类型是否相关，而不会执行任何运行阶段检查，可通过编译，但在运行阶段可能导致意外结果。<br>除了用于向上和向下转换外，static_cast还可在很多情况下将隐式类型转换为显式类型，来引起代码阅读注意作用。<br>int Num = static_cast<int>(dPi);<br>dynamic_cast<br>与静态类型转换相反，动态类型转换在运行阶段（即应用程序运行时）执行类型转换。<br>Derived objDerived;<br>Derived<em> pDerived=dynamic_cast&lt;Derived</em>&gt;(pBase);<br>if (pDerived)<br>    pDerived-&gt;CallDerivedClassFunction();<br>reinterpret_cast（避免使用）<br>语法强制重新解释类型，将一种类型转换为另一种，不管它们是否相关。<br>Base<em> pBase = new Base();<br>CUnrelated </em> pUnrelated = reinterpret_cast<cunrelated*>(pBase); //可通过编译，但是不是良好的编程<br>接收static_cast不允许的类型转换。通常用于低级程序（如驱动程序），在这种程序中，需要将数据转换为API能够接受的简单类型（例如有些API只能使用字节流unsigned char*）<br>const_cast<br>起到关闭对象的访问修饰符const的作用<br>可能该引用const，但是用的第三方库中没有用const，且第三方库无法修改，在这种情况下，const_cast应用。<br>void DisplayAllData(const SomeClass&amp; mData)<br>{<br>    mData.DisplayMembers(); //Compile failure:call to a non-const member using a const reference<br>    SomeClass&amp; refData = const_cast<someclass&>(mData);<br>    refData.DisplayMembers(); //Allowed!<br>}<br>除非万不得已，不用其调用非const函数，可能导致不可预料的行为。</someclass&></cunrelated*></int></p>
<p>34.避免宏多次包含<br>复杂设计，头文件间彼此包含会导致递归问题，为了避免这种问题，可结合使用宏以及预处理器编译指令#ifndef和#endif<br>包含<head2.h>的head1.h类似于下面这样：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#ifndef HEADER1_H_  <span class="comment">//让预处理器仅在标识符未定义时才继续</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> HEADER1_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;header2.h&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">//end of header1.h</span></span></span><br><span class="line">header2.h与此类似，但宏定义不同，且包含的是&lt;header1.h&gt;:</span><br><span class="line"><span class="preprocessor">#ifndef HEADER2_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> HEADER2_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;header1.h&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">//end of header2.h</span></span></span><br><span class="line"></span><br><span class="line">编写宏函数   宏函数不考虑数据类型，因此使用宏函数很危险，因为不支持任何形式的类型安全</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SQUARE(x) ((x)*(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MIN(a,b) (((a)&lt;(b))?(a):(b))</span></span><br><span class="line">但也是其优点，可以通用数据类型，不用编写两套常规函数。</span><br></pre></td></tr></table></figure></head2.h></p>
<p>35.assert宏验证表达式<br>立即单步执行测试不现实<br>需要包含<assert.h>，用来对表达式或变量的值进行验证。</assert.h></p>
<h1 id="include">include<assert.h></assert.h></h1><p>int main()<br>{<br>    char* sayHello = new char[25];<br>    assert(sayHello != NULL);  //throws up a message if pointer is NULL<br>    ….<br>    delete[] sayHello;<br>    return 0;<br>}</p>
<p>注意：在发布模式release下被禁用，仅在debug下显示错误消息。在有些开发环境中，assert()被实现为函数，而不是宏。<br>由于assert在release模式下禁用，对于应用程序正确运行至关重要的检查（如dynamic_cast的返回值），为确保在发布模式下运行，应使用if语句。</p>
<p>36.模板函数和模板类<br>模板函数可以不指定类型（如int MaxValue = GetMax <int> (Int1,Int2)红色可省略），模板类必须显示的指定类型</int></p>
<h1 id="include-1">include<iostream></iostream></h1><h1 id="include-2">include<string></string></h1><p>using namespace std;</p>
<p>template <typename type=""><br>void DisplayComparison(const Type&amp; value1,const Type&amp; value2)<br>{<br>    if(value1&gt;value2)<br>        return value1;<br>    else<br>        return value2;<br>}</typename></p>
<p>template <typename type=""><br>void DisplayComparison(const Type&amp; value1,const Type&amp; value2)<br>{<br>    cout&lt;&lt;GetMax(value1,value2)&lt;&lt;endl;<br>}</typename></p>
<p>int main()<br>{<br>    int Int1=-101,Int2=2011;<br>    DisplayComparison(Int1,Int2);<br>    double d1=3.14,d2=3.1416;<br>    DisplayComparison(d1,d2);<br>    string Name1(“Jack”),Name2(“John”);<br>    DisplayComparison(Name1,Name2);<br>}</p>
<p>37.模板类和静态成员<br>初始化模板类静态成员<br>通用的初始化语法为：<br>template<template parameters=""> StaticType ClassName<template arguments="">::StaticVarName;<br>例如：template<typename t=""> int TestStatic<t>::StaticValue;</t></typename></template></template></p>
<p>38.在头文件中，多次包含防范使用#ifndef、#define和#endif，可避免头文件出现多次包含或递归包含错误，有事可以提高编译速度。</p>
<p>39.模板最重要的最强大的应用是在标准模板库(STL)中。STL由一系列模板类和函数组成，它们分别包含泛型实用类和算法。能够实现动态数组、链表以及包含键-值对的容器，而sort等算法可用于这些容器，从而对容器包含的数据进行处理。</p>
<p>40.STL提供了<br>用于存储信息的容器，用于访问容器存储的信息的迭代器，用于操作容器内容的算法<br>提供了两种类型容器：顺序容器、关联容器、容器适配器（Container Adapter）的类</p>
<p>顺序容器：（如数组和列表）<br>std::vector 动态数组，在最后插入<br>std::deque 与vector类似，但允许在开头插入或删除元素<br>std::list 与双向链表一样，对象被连接在一起，可在任何位置添加和删除对象<br>std::forward_list 类似list，是单项链表，只能沿一个方向遍历</p>
<h1 id="vector和数组类似，允许随机访问元素，即可使用下标运算符[]指定元素在vector中的位置（索引），从而直接访问或操作元素。另外，STL_vector是动态数组，因此能够根据应用程序在运行阶段的需求自动调整长度。">vector和数组类似，允许随机访问元素，即可使用下标运算符[]指定元素在vector中的位置（索引），从而直接访问或操作元素。另外，STL vector是动态数组，因此能够根据应用程序在运行阶段的需求自动调整长度。</h1><p>==========================</p>
<p>关联容器：（如词典，按指定的顺序存储数据）<br>std::set<br>std::unordered_set<br>std::map<br>std::unordered_map<br>std::multiset<br>std::unordered_multiset<br>std::multimap<br>std::unordered_multimap</p>
<p>hash<em>*和unordered</em>*容器有更好的元素搜索性能。</p>
<p>STL迭代器—-模板类<br>输入迭代器：解除引用，对象可能位于集合中。最严格的输入迭代器只能以只读的方式访问对象。<br>输出迭代器：执行写入操作。最严格的只能执行写入操作。<br>    上述两种基本迭代器进一步分为三类：<br>前向迭代器：是输入和输出迭代器的细化，允许输入与输出。可以是const的，只能读取它指向的对象；也可以改变对象，即可读写对象。通常用于单向链表。forward_list<br>双向迭代器：是前向迭代器的细化，可对其执行递减操作，从而向后操作。通常用于双向链表。<br>随机访问迭代器：对双向迭代器的细化，可将其加减一个偏移量，还可将两个迭代器相减以得到集合中两个元素的相对距离。随机访问迭代器通常用于数组。（细化指具体化或继承）<br>STL算法<br>    查找、排序和反转都是标准的编程需求，以算法方式提供这些函数。<br>常用STL算法：<br>    std::find 在集合中查找值<br>    std::find_if 根据用户指定的谓词在集合中查找值<br>    std::reverse 反转集合中元素的排列顺序<br>    std::remove_if 根据用户定义的谓词将元素从集合中删除<br>    std::transform 使用用户定义的变换函数对容器中的元素进行变换<br>都是std命名空间中的模板函数，必须包含头文件<algorithm></algorithm></p>
<p>迭代器如何将容器和STL算法连接？<br>code实例：</p>
<h1 id="include-3">include<iostream></iostream></h1><h1 id="include-4">include<vector></vector></h1><h1 id="include-5">include<algorithm></algorithm></h1><p>using namespace std;</p>
<p>int main()<br>{<br>    //A dynamic array of intergers<br>    vector <int> vecIntegerArray;<br>    //insert sample integers into the array<br>    vecIntegerArray.push_back(50);<br>    vecIntegerArray.push_back(200);<br>    vecIntegerArray.push_back(23);</int></p>
<pre><code>cout&lt;&lt;<span class="string">"The contents of the vector are:"</span>&lt;&lt;endl;

//walk the vector <span class="keyword">and</span> read values <span class="keyword">using</span> an <span class="keyword">iterator</span>
vector &lt;<span class="type">int</span>&gt;::<span class="keyword">iterator</span> iArrayWalker = vecIntegerArray.begin();

<span class="keyword">while</span>(iArrayWalker != vecIntegerArray.<span class="keyword">end</span>())
{
    //write the value to the screen
    cout&lt;&lt;*iArrayWalker&lt;&lt;endl;

    //<span class="type">Increment</span> the <span class="keyword">iterator</span> to access the next element
    ++iArrayWalker;
}

//find an element (say <span class="number">23</span>) <span class="keyword">in</span> the <span class="type">array</span> <span class="keyword">using</span> the 'find' algorithm
vector &lt;<span class="type">int</span>&gt;::<span class="keyword">iterator</span> iElement = find(vecIntegerArray.begin(),vecIntegerArray.<span class="keyword">end</span>(),<span class="number">23</span>);

//check <span class="keyword">if</span> value was found
<span class="keyword">if</span> (iElement != vecIntegerArray.<span class="keyword">end</span>())
{
    //value was found...<span class="type">Determine</span> position <span class="keyword">in</span> the <span class="type">array</span>:
    <span class="type">int</span> position = distance (vecIntegerArray.begin(),iElement);
    cout&lt;&lt;<span class="string">"value"</span>&lt;&lt;*iElement;
    cout&lt;&lt;<span class="string">"found in the vector at position:"</span>&lt;&lt;position&lt;&lt;endl;
}

<span class="keyword">return</span> <span class="number">0</span>;
</code></pre><p>}</p>
<p>41.模板template 声明和实现要在一起，不能分开</p>
<p>42.逗号表达式，运算符最低      <strong><em> , </em></strong>  先前面表达式，再后面表达式。<br>    例如x=(i=10 , i*5)</p>
]]></content>
    <summary type="html">
    <![CDATA[C++易爆bug点]]>
    
    </summary>
    
      <category term="C++" scheme="http://deTrident.github.io/tags/C/"/>
    
      <category term="C++" scheme="http://deTrident.github.io/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[驾校系统web端刷课想法]]></title>
    <link href="http://deTrident.github.io/2015/03/28/%E9%A9%BE%E6%A0%A1%E7%B3%BB%E7%BB%9Fweb%E7%AB%AF%E5%88%B7%E8%AF%BE%E6%83%B3%E6%B3%95/"/>
    <id>http://deTrident.github.io/2015/03/28/驾校系统web端刷课想法/</id>
    <published>2015-03-28T07:46:54.000Z</published>
    <updated>2015-07-22T14:49:20.603Z</updated>
    <content type="html"><![CDATA[<h2 id="Background：">Background：</h2><p>学车好累，要考四个科目，修好多学时；冬天学车惨无人道，早五点半起床，伸手不见五指；帝都学车的人好多，提前一周放号抢起来简直丧心病狂，与秒杀春节火车票没啥区别，服务器都挤爆了。<a id="more"></a></p>
<h2 id="Methods:">Methods:</h2><p>方法就是回去攒积人品和练习反应速度，炉火纯青之时，也就是学成之日→<em>→ →</em>→。<br>还有方法就是学习抢火车票插件的有余票提示，因为总会有人临时有事退约，时不时的登陆查看太伤神，也不是21世纪青年的作风。</p>
<h2 id="WorkFlow：">WorkFlow：</h2><p>1.Python-Urllib2模拟浏览器登陆<br>2.下载登陆后约车页面信息<br>3.对信息进行正则化表达式匹配<br>4.定时刷新捕捉，并判断是否在登陆状态<br>5.符合要求通知/符合要求自动提交</p>
<h2 id="Code:[状态：未完成4,5]">Code:[状态：未完成4,5]</h2><p>1.模拟登陆(环境<code>python2.7.8+Pydev for Eclipse</code>)<br>以远大页面为例，是asp.net页面，打开浏览器登录页面，<code>F12</code>调出开发者工具，找到<code>Network</code>栏，刷新一下页面，筛选出POST方法的页面，并判断帐号提交页。分析cookies，喂给对应项。如下面code，模拟登录页面。不知道为什么，明明预留了验证码校验的和产生页，给拿掉了，这方便了登录和刷新了，要是有验证码的话，自动登录还需要验证码识别，不知道大牛博客里说的借助360火车票识别验证码的那个端口可不可行，这里不管了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Created on <span class="number">2015</span>年<span class="number">1</span>月<span class="number">15</span>日</span><br><span class="line"><span class="decorator">@author: ZH</span></span><br><span class="line"><span class="string">'''</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">'''</span></span><br><span class="line">Urllib2 excercise 训练</span><br><span class="line"><span class="string">'''</span><br><span class="line">import urllib,urllib2,cookielib</span><br><span class="line"></span><br><span class="line"># NAME=raw_input('input UserName:')</span><br><span class="line"># PASSWORD=raw_input('input Password:')</span><br><span class="line"></span><br><span class="line">##函数体##</span><br><span class="line">def YDJXLogin(url,user,password):</span><br><span class="line">    login_page = 'http://yuanda.bjxueche.net/Login.aspx'   #以远大驾校页面测试</span><br><span class="line">    cj = cookielib.CookieJar()</span><br><span class="line">    opener=urllib2.build_opener(urllib2.HTTPCookieProcessor(cj)) </span><br><span class="line">    #reqlg = urllib2.Request(url=login_page)</span><br><span class="line">    opener.addheaders= [('Accept','text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')]</span><br><span class="line">    opener.addheaders= [('Referer', 'http://yuanda.bjxueche.net/Login.aspx')]</span><br><span class="line">    #模拟firefox浏览器登录</span><br><span class="line">    opener.addheaders = [('User-Agent', 'Mozilla/5.0 (Windows NT 6.1; rv:18.0) Gecko/20100101 Firefox/18.0')] </span><br><span class="line">    para = urllib.urlencode(&#123;"__VIEWSTATE":"/wEPDwUKMTg0NDI4MDE5OGRkFUZOE3C7QQL4pJ/OooIN7IVnK5Qfznhym5mN84V5JNQ=",</span><br><span class="line">                         "__EVENTVALIDATION":"/wEWBgKyrJC6AwKl1bKzCQK1qbSRCwLoyMm8DwLi44eGDAKAv7D9CmhsXW9MljUvafu1DHCUaQFrdAWsE0NBXcwobLtWNjsS",</span><br><span class="line">                         "txtUserName":user,</span><br><span class="line">                         "txtPassword":password,</span><br><span class="line">                         "txtIMGCode":"",</span><br><span class="line">                         "BtnLogin":"登  录",</span><br><span class="line">                         "rcode":""</span><br><span class="line">                         &#125;)</span><br><span class="line">    opener.open(login_page, para)</span><br><span class="line">    op = opener.open(url)</span><br><span class="line">    data = op.read()</span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line">print YDJXLogin("http://yuanda.bjxueche.net/index.aspx",370xxxxxxxxxxxxxxx,xxxxxx) #以远大驾校页面测试</span></span><br></pre></td></tr></table></figure>
<p>2.之后难题待攻克，有时间再研究。纯属爱好，不恶意刷新。如有那啥，及时删除。</p>
]]></content>
    <summary type="html">
    <![CDATA[urllib刷课想法]]>
    
    </summary>
    
      <category term="Python" scheme="http://deTrident.github.io/tags/Python/"/>
    
      <category term="urllib" scheme="http://deTrident.github.io/tags/urllib/"/>
    
      <category term="Python" scheme="http://deTrident.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo+GitHub Pages搭建]]></title>
    <link href="http://deTrident.github.io/2015/03/24/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA/"/>
    <id>http://deTrident.github.io/2015/03/24/Hexo-GitHub-Pages搭建/</id>
    <published>2015-03-24T12:39:33.000Z</published>
    <updated>2015-06-25T14:15:17.063Z</updated>
    <content type="html"><![CDATA[<p><img src="http://ww3.sinaimg.cn/mw690/87f64593gw1etggj06mmmg20dw07su0y.gif" alt=""></p>
<h3 id="Hi_Github"><b>Hi Github</b></h3><p>一直习惯于百度空间来记录和分享一些专业内容和技术性问题，突然遭遇到了百度空间关闭，真是好受伤，只好用两天的时<a id="more"></a>间把空间中有价值的内容全部抓入了有道云笔记，囤了好一大堆内容。偶然，在微信上读到<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="external">写博客的好处</a>这篇文章，才决心再次建立空间—ps:以往还真没发现这么多好处。本来想着自己租个VPS主机，搭建一个博客并学习一下大名顶顶的WordPress，听同学说维护成本太高，他的网站都变成黑客挂马的测试用地了●▽●，想了想现在也没太多时间，还是等有空再折腾PHP吧。思来想去，Github是一个不错的选择。记得是大三的时候，使用最为怀念的RSS阅读器<a href="http://baike.baidu.com/view/631075.htm" target="_blank" rel="external">Google Reader</a>首次晓得Github，到年初Google Code服务被迫关闭，才意识到GitHub时代的到来。Github Pages即跟随时代药药药的潮流，也方便push和备份文章。那，就开始啦(￣︶￣)↗ </p>
<h3 id="选择Hexo"><b>选择Hexo</b></h3><p>一开始是使用Jykell搭建的，安装了Ruby、Devkit和一堆东西，根据度娘给的经验一步一步的来，过程中遇到各种各样的问题，竟然Ruby版本太新也不行，其中有个cannot load such file — hitimes/hitimes (LoadError)的问题，费了好长时间，才从stackoverflow找到<a href="http://stackoverflow.com/questions/28985481/hitimes-require-error-when-running-jekyll-serve-on-windows-8-1" target="_blank" rel="external">解决方案</a>，但对问题和解决啥都搞不动，这太不爽了。之后测试，虽然用起来不麻烦，还不错。然而，像我这样安静的美男子●▽●，看到别人漂亮的界面，真是不忍心拿出来丢人现眼。在知乎中，偶然看到别人对Hexo的推荐，光看到theme就一下爱上了。后来了解到，操作更简单，一下就拔不出来啦&lt;(￣▽￣)&gt; 哇哈哈…<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo new <span class="string">"name"</span></span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p>
<h3 id="感谢"><b>感谢</b></h3><p>感谢国家，感谢党，不用翻墙就能上。<br>感谢cnFeat<a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="external">教程</a>，感谢litten提供的漂亮模板。一步一步，学习中…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://ww3.sinaimg.cn/mw690/87f64593gw1etggj06mmmg20dw07su0y.gif" alt=""></p>
<h3 id="Hi_Github"><b>Hi Github</b></h3><p>一直习惯于百度空间来记录和分享一些专业内容和技术性问题，突然遭遇到了百度空间关闭，真是好受伤，只好用两天的时]]>
    
    </summary>
    
      <category term="Github" scheme="http://deTrident.github.io/tags/Github/"/>
    
      <category term="随笔" scheme="http://deTrident.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="GitHub" scheme="http://deTrident.github.io/categories/GitHub/"/>
    
  </entry>
  
</feed>
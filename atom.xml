<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Better man]]></title>
  <subtitle><![CDATA[Technology Changes the World]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://deTrident.github.io//"/>
  <updated>2015-07-22T07:51:01.767Z</updated>
  <id>http://deTrident.github.io//</id>
  
  <author>
    <name><![CDATA[deTrident]]></name>
    <email><![CDATA[zhengradi@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[OpenCV无法正常启动Oxc000007b错误]]></title>
    <link href="http://deTrident.github.io/2015/05/02/OpenCV-Oxc000007b-Error/"/>
    <id>http://deTrident.github.io/2015/05/02/OpenCV-Oxc000007b-Error/</id>
    <published>2015-05-02T13:27:26.000Z</published>
    <updated>2015-07-22T07:51:01.767Z</updated>
    <content type="html"><![CDATA[<h2 id="环境">环境</h2><p>在之前win7系统下一直没见过这个错误，更换到win8.1 64bit，在一系列非人类配置完成后，编译成功，运行却报错。显示<a id="more"></a><strong>“无法正常启动Oxc000007b错误”</strong>。搜索了一下，好像出现这个问题的不少，折磨了好大一批人。OpenCV我使用的版本是2.4.9，引用的是自己根据<a href="http://www.nmtree.net/2014/03/19/windows_build-opencv-with-cmake-and-vs2013.html" target="_blank" rel="external">柠檬树</a>的教程编译的库。测试程序为VS2013+win32 console application。</p>
<h2 id="解决方案">解决方案</h2><blockquote>
<p>网络解决方案(对环境变量的修改，记得注销系统来生效)<br>    1.环境变量里原来只有D:\OpenCV2\build\x64\vc10\bin加上D:\OpenCV2\build\x86\vc10\bin就OK了<br>    2.64位程序环境变量里添加D:\opencv\build\common\tbb\intel64\vc10；32位要添加D:\opencv\build\common\tbb\ia32\vc10</p>
</blockquote>
<h3 id="我的测试：">我的测试：</h3><ul>
<li><p>更换debug——win32平台为x64平台，未出现该问题（ps:可能跟window系统有关)</p>
</li>
<li><p>升级OpenCV版本到2.4.11，问题没再出现<font color="red">【2015-6-1更新】</font></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[OpenCV无法正常启动Oxc000007b错误]]>
    
    </summary>
    
      <category term="OpenCV2" scheme="http://deTrident.github.io/tags/OpenCV2/"/>
    
      <category term="OpenCV" scheme="http://deTrident.github.io/categories/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Review TinyXML]]></title>
    <link href="http://deTrident.github.io/2015/04/21/Review-TinyXML/"/>
    <id>http://deTrident.github.io/2015/04/21/Review-TinyXML/</id>
    <published>2015-04-21T13:18:46.000Z</published>
    <updated>2015-07-22T03:15:59.298Z</updated>
    <content type="html"><![CDATA[<p>最近项目读取影像数据metadata，再次用到TinyXML，已经不那么熟练。之前使用还是专题产品系统的时候，在副研师兄大框架下引用的。最近有点空，整理下相关内容，备以后查询回顾。<br><a id="more"></a></p>
<h2 id="特性：">特性：</h2><p>TinyXML是目前C++的XML解析器用起来最友好的，作为轻量开源跨平台库（可商用），对xml的文本的解析提供了很大的便利。解析库模型在解析xml文件后，在内存中将信息转化为文档对象模型(DOM)使得可读、写、存，并利用树形结构表示这些元素之间的顺序和嵌套关系。支持UTF-8编码和前64k个字符实体。<br><strong>注意：</strong>不解析文档类型定义(DTDs)和可扩展样式表语言XSLs<br>例如下面DTD语法在TinyXML里是不做解析的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE Archiv [</span><br><span class="line">	 &lt;!ELEMENT Comment (#PCDATA)&gt;</span><br><span class="line">]&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>所以用于浏览器或更复杂的XML需要，目前的TinyXML是不能满足的。</p>
<h2 id="使用：">使用：</h2><p>下载<a href="http://sourceforge.net/projects/tinyxml/" target="_blank" rel="external">TinyXML</a>，解压缩后，将根目录下tinyxml.h、tinyxml.cpp、tinystr.h、tinystr.cpp、tinyxmlerror.cpp、tinyxmlparser.cpp六个文件拷贝添加到将要使用的Cpp工程即可，需要操作XML文件的地方，在头文件中加入<code>#include&quot;tinyxml.h&quot;</code>。如需要，可编译成dll（技能点加强：在tinyxml.h改相关属性来自定义特性）</p>
<h2 id="操作：">操作：</h2><p><img src="http://grinninglizard.com/tinyxmldocs/classTiXmlBase.png" alt="classTiXmlBase" title="TiXMlBase官方类图"><br>        （一图以蔽之，官方大法好）</p>
<blockquote>
<p>类列表<br>    TiXmlBase：整个TinyXML模型的基类。<br>    TiXmlAttribute：XML中的元素的属性对（name-value)。<br>    TiXmlNode：DOM结构中的节点。<br>    TiXmlComment：XML中的注释<br>    TiXmlDeclaration：XML中的声明部分，在开始处，即&lt;？versiong=”1.0” ?&gt;。<br>    TiXmlDocument：XML的整个文档，即顶端节点。<br>    TiXmlElement：XML的元素，为一个容器。<br>    TiXmlText：XML的文字。<br>    TiXmlUnknown：任何未被TinyXML识别的保存成了这个未知。<br>    TiXmlHandler：定义了针对XML的一些操作。</p>
</blockquote>
<h2 id="代码段：">代码段：</h2><p>据详细的tutorial，<a href="http://grinninglizard.com/tinyxmldocs/tutorial0.html" target="_blank" rel="external">http://grinninglizard.com/tinyxmldocs/tutorial0.html</a><br>不怕不会用呀，备查</p>
]]></content>
    <summary type="html">
    <![CDATA[TinyXML]]>
    
    </summary>
    
      <category term="TinyXML" scheme="http://deTrident.github.io/tags/TinyXML/"/>
    
      <category term="C++" scheme="http://deTrident.github.io/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[regular expression 正则表达式]]></title>
    <link href="http://deTrident.github.io/2015/04/12/regular-expression/"/>
    <id>http://deTrident.github.io/2015/04/12/regular-expression/</id>
    <published>2015-04-12T03:00:06.000Z</published>
    <updated>2015-07-22T12:09:52.424Z</updated>
    <content type="html"><![CDATA[<p>正则表达式超赞教程 (<em>^__^</em>) <a id="more"></a><br>正则表达式30分钟入门教程 <a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">http://deerchao.net/tutorials/regex/regex.htm</a><br>（30分钟学不完，请自觉回家种地）</p>
<p>Python抓包，正则表达式必备，从<a href="http://www.cnblogs.com/huxi" target="_blank" rel="external">AstralWind</a><code>大神博客</code>直接引图，搬运工角色扮演中→_→</p>
<p><img src="http://ww2.sinaimg.cn/mw690/87f64593gw1eubddbh1duj20m71brb29.jpg" alt="Python-Regex" title="Python正则表达式图"></p>
<p>这篇为啥就这几个字？<br>因为<br>    <em>任性</em>！</p>
]]></content>
    <summary type="html">
    <![CDATA[正则表达式]]>
    
    </summary>
    
      <category term="Python" scheme="http://deTrident.github.io/tags/Python/"/>
    
      <category term="Python" scheme="http://deTrident.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[驾校系统web端刷课想法]]></title>
    <link href="http://deTrident.github.io/2015/03/28/%E9%A9%BE%E6%A0%A1%E7%B3%BB%E7%BB%9Fweb%E7%AB%AF%E5%88%B7%E8%AF%BE%E6%83%B3%E6%B3%95/"/>
    <id>http://deTrident.github.io/2015/03/28/驾校系统web端刷课想法/</id>
    <published>2015-03-28T07:46:54.000Z</published>
    <updated>2015-07-22T12:06:44.242Z</updated>
    <content type="html"><![CDATA[<h2 id="Background：">Background：</h2><p>学车好累，要考四个科目，修好多学时；冬天学车惨无人道，早五点半起床，伸手不见五指；帝都学车的人好多，提前一周放号抢起来简直丧心病狂，与秒杀春节火车票没啥区别，服务器都挤爆了。<a id="more"></a></p>
<h2 id="Methods:">Methods:</h2><p>方法就是回去攒积人品和练习反应速度，炉火纯青之时，也就是学成之日→<em>→ →</em>→ →<em>→ →</em>→ →_→。<br>还有方法就是学习抢火车票插件的有余票提示，因为总会有人临时有事退约，时不时的登陆查看太伤神，也不是21世纪青年的作风。</p>
<h2 id="WorkFlow：">WorkFlow：</h2><p>1.Python-Urllib2模拟浏览器登陆<br>2.下载登陆后约车页面信息<br>3.对信息进行正则化表达式匹配<br>4.定时刷新捕捉，并判断是否在登陆状态<br>5.符合要求通知/符合要求自动提交</p>
<h2 id="Code:[状态：未完成4,5]">Code:[状态：未完成4,5]</h2><p>1.模拟登陆(环境<code>python2.7.8+Pydev for Eclipse</code>)<br>以远大页面为例，是asp.net页面，打开浏览器登录页面，<code>F12</code>调出开发者工具，找到<code>Network</code>栏，刷新一下页面，筛选出POST方法的页面，并判断帐号提交页。分析cookies，喂给对应项。如下面code，模拟登录页面。不知道为什么，明明预留了验证码校验的和产生页，给拿掉了，这方便了登录和刷新了，要是有验证码的话，自动登录还需要验证码识别，不知道大牛博客里说的借助360火车票识别验证码的那个端口可不可行，这里不管了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Created on <span class="number">2015</span>年<span class="number">1</span>月<span class="number">15</span>日</span><br><span class="line"><span class="decorator">@author: ZH</span></span><br><span class="line"><span class="string">'''</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">'''</span></span><br><span class="line">Urllib2 excercise 训练</span><br><span class="line"><span class="string">'''</span><br><span class="line">import urllib,urllib2,cookielib</span><br><span class="line"></span><br><span class="line"># NAME=raw_input('input UserName:')</span><br><span class="line"># PASSWORD=raw_input('input Password:')</span><br><span class="line"></span><br><span class="line">##函数体##</span><br><span class="line">def YDJXLogin(url,user,password):</span><br><span class="line">    login_page = 'http://yuanda.bjxueche.net/Login.aspx'   #以远大驾校页面测试</span><br><span class="line">    cj = cookielib.CookieJar()</span><br><span class="line">    opener=urllib2.build_opener(urllib2.HTTPCookieProcessor(cj)) </span><br><span class="line">    #reqlg = urllib2.Request(url=login_page)</span><br><span class="line">    opener.addheaders= [('Accept','text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')]</span><br><span class="line">    opener.addheaders= [('Referer', 'http://yuanda.bjxueche.net/Login.aspx')]</span><br><span class="line">    #模拟firefox浏览器登录</span><br><span class="line">    opener.addheaders = [('User-Agent', 'Mozilla/5.0 (Windows NT 6.1; rv:18.0) Gecko/20100101 Firefox/18.0')] </span><br><span class="line">    para = urllib.urlencode(&#123;"__VIEWSTATE":"/wEPDwUKMTg0NDI4MDE5OGRkFUZOE3C7QQL4pJ/OooIN7IVnK5Qfznhym5mN84V5JNQ=",</span><br><span class="line">                         "__EVENTVALIDATION":"/wEWBgKyrJC6AwKl1bKzCQK1qbSRCwLoyMm8DwLi44eGDAKAv7D9CmhsXW9MljUvafu1DHCUaQFrdAWsE0NBXcwobLtWNjsS",</span><br><span class="line">                         "txtUserName":user,</span><br><span class="line">                         "txtPassword":password,</span><br><span class="line">                         "txtIMGCode":"",</span><br><span class="line">                         "BtnLogin":"登  录",</span><br><span class="line">                         "rcode":""</span><br><span class="line">                         &#125;)</span><br><span class="line">    opener.open(login_page, para)</span><br><span class="line">    op = opener.open(url)</span><br><span class="line">    data = op.read()</span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line">print YDJXLogin("http://yuanda.bjxueche.net/index.aspx",370xxxxxxxxxxxxxxx,xxxxxx) #以远大驾校页面测试</span></span><br></pre></td></tr></table></figure>
<p>2.之后难题待攻克，有时间再研究。纯属爱好，不恶意刷新。如有那啥，及时删除。</p>
]]></content>
    <summary type="html">
    <![CDATA[urllib刷课想法]]>
    
    </summary>
    
      <category term="Python" scheme="http://deTrident.github.io/tags/Python/"/>
    
      <category term="urllib" scheme="http://deTrident.github.io/tags/urllib/"/>
    
      <category term="Python" scheme="http://deTrident.github.io/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo+GitHub Pages搭建]]></title>
    <link href="http://deTrident.github.io/2015/03/24/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA/"/>
    <id>http://deTrident.github.io/2015/03/24/Hexo-GitHub-Pages搭建/</id>
    <published>2015-03-24T12:39:33.000Z</published>
    <updated>2015-06-25T14:15:17.063Z</updated>
    <content type="html"><![CDATA[<p><img src="http://ww3.sinaimg.cn/mw690/87f64593gw1etggj06mmmg20dw07su0y.gif" alt=""></p>
<h3 id="Hi_Github"><b>Hi Github</b></h3><p>一直习惯于百度空间来记录和分享一些专业内容和技术性问题，突然遭遇到了百度空间关闭，真是好受伤，只好用两天的时<a id="more"></a>间把空间中有价值的内容全部抓入了有道云笔记，囤了好一大堆内容。偶然，在微信上读到<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="external">写博客的好处</a>这篇文章，才决心再次建立空间—ps:以往还真没发现这么多好处。本来想着自己租个VPS主机，搭建一个博客并学习一下大名顶顶的WordPress，听同学说维护成本太高，他的网站都变成黑客挂马的测试用地了●▽●，想了想现在也没太多时间，还是等有空再折腾PHP吧。思来想去，Github是一个不错的选择。记得是大三的时候，使用最为怀念的RSS阅读器<a href="http://baike.baidu.com/view/631075.htm" target="_blank" rel="external">Google Reader</a>首次晓得Github，到年初Google Code服务被迫关闭，才意识到GitHub时代的到来。Github Pages即跟随时代药药药的潮流，也方便push和备份文章。那，就开始啦(￣︶￣)↗ </p>
<h3 id="选择Hexo"><b>选择Hexo</b></h3><p>一开始是使用Jykell搭建的，安装了Ruby、Devkit和一堆东西，根据度娘给的经验一步一步的来，过程中遇到各种各样的问题，竟然Ruby版本太新也不行，其中有个cannot load such file — hitimes/hitimes (LoadError)的问题，费了好长时间，才从stackoverflow找到<a href="http://stackoverflow.com/questions/28985481/hitimes-require-error-when-running-jekyll-serve-on-windows-8-1" target="_blank" rel="external">解决方案</a>，但对问题和解决啥都搞不动，这太不爽了。之后测试，虽然用起来不麻烦，还不错。然而，像我这样安静的美男子●▽●，看到别人漂亮的界面，真是不忍心拿出来丢人现眼。在知乎中，偶然看到别人对Hexo的推荐，光看到theme就一下爱上了。后来了解到，操作更简单，一下就拔不出来啦&lt;(￣▽￣)&gt; 哇哈哈…<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo new <span class="string">"name"</span></span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p>
<h3 id="感谢"><b>感谢</b></h3><p>感谢国家，感谢党，不用翻墙就能上。<br>感谢cnFeat<a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="external">教程</a>，感谢litten提供的漂亮模板。一步一步，学习中…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://ww3.sinaimg.cn/mw690/87f64593gw1etggj06mmmg20dw07su0y.gif" alt=""></p>
<h3 id="Hi_Github"><b>Hi Github</b></h3><p>一直习惯于百度空间来记录和分享一些专业内容和技术性问题，突然遭遇到了百度空间关闭，真是好受伤，只好用两天的时]]>
    
    </summary>
    
      <category term="Github" scheme="http://deTrident.github.io/tags/Github/"/>
    
      <category term="随笔" scheme="http://deTrident.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="GitHub" scheme="http://deTrident.github.io/categories/GitHub/"/>
    
  </entry>
  
</feed>